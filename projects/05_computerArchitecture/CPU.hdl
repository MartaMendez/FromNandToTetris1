
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	And(a=instruction[3], b=instruction[15], out=writeM);
	
	Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMuxA);
	
	Not(in=instruction[15], out=aCommand);
	Or(a=aCommand, b=instruction[5], out=loadA);
	ARegister(in=outMuxA, load=loadA, out=A, out[0..14]=addressM);
	
	Mux16(a=A, b=inM, sel=instruction[12], out=outMuxALU);
	
	And(a=instruction[15], b=instruction[4], out=loadD);
	DRegister(in=outALU, load=loadD, out=D);
	
	ALU(x=D, y= outMuxALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=zr, ng=ng);
	
	// ^a*^b(zb+c*^Z) + a*^b*^z(c+n) + ab(c+z+n)
	
	Not(in=instruction[2], out=notA);
	Not(in=instruction[1], out=notB);
	Not(in=zr, out=notZr);
	Not(in=ng, out=notNg);
	
	And(a=zr, b=instruction[1], out=c121);
	And(a=notZr, b=instruction[0], out=c122);
	Or(a=c121, b=c122, out=c12);
	And(a=notA, b=notNg, out=c11);
	And(a=c11, b=c12, out=c1);
	
	And(a=instruction[2], b=notB, out=c21);
	Or(a=instruction[0], b=ng, out=c221);
	And(a=notZr, b=c221, out=c22);
	And(a=c21, b=c22, out=c2);
	
	Or(a=instruction[0], b=zr, out=c321);
	Or(a=c321, b=ng, out=c32);
	And(a=instruction[2], b=instruction[1], out=c31);
	And(a=c31, b=c32, out=c3);
	
	Or(a=c1, b=c2, out=r1);
	Or(a=r1, b=c3, out=r2);
	And(a=instruction[15], b=r2, out=loadPC);
		
	PC(in=A, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
	


}